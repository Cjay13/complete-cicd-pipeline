pipeline {
    agent any

    tools {
        jdk 'jdk17'
        maven 'maven3'

    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'stage', credentialsId: 'git-cred', url: 'https://github.com/Cjay13/complete-cicd-pipeline.git' 
            }
        }

        stage('Code Compile') {
            steps {
                sh "mvn compile" 
            }
        }

        stage('Code Test') {
            steps {
                sh "mvn test" 
            }
        }

        stage('Vulnerability scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ." 
            }
        }

        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=ecom_crm \
                            -Dsonar.projectKey=ecom_crm \
                            -Dsonar.java.binaries=. ''' 
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script{
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        
        stage('Code Build') {
            steps {
                sh "mvn package" 
            }
        }

        stage('Publish to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy"
                }
            }
        }

        stage('Authenticate to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'DOCKERHUB_ID', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh '''
                        docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}
                    '''
                }

            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'chmod +x Jenkins/Scripts/build.sh' //grant execute permission
                    sh 'Jenkins/Scripts/build.sh'
                }
            }
        }      

        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8s-cred', namespace: 'ecom', restrictKubeConfigAccess: false, serverUrl: 'https://10.0.1.140:6443') {
                    script {
                       sh 'chmod +x Jenkins/Scripts/deploy.sh' //grant execute permission
                        sh 'Jenkins/Scripts/deploy.sh' 
                    }
                }
            }
        }  

    }    
}